<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mealmate.mapper.OrderMapper">
    <insert id="insert" parameterType="com.mealmate.entity.Order" useGeneratedKeys="true" keyProperty="id">
        insert into `orders` (serial_number, status, user_id, address_id, order_time, checkout_time, pay_method, pay_status, price, note, phone ,address, user_name, name, cancel_reason, rejection_reason, cancel_time, estimated_delivery_time, delivery_status, delivery_time, packaging_fee, tableware_number, tableware_status)
        values (#{serialNumber}, #{status}, #{userId}, #{addressId}, #{orderTime}, #{checkoutTime}, #{payMethod}, #{payStatus}, #{price}, #{note}, #{phone}, #{address}, #{userName}, #{name}, #{cancelReason}, #{rejectionReason}, #{cancelTime}, #{estimatedDeliveryTime}, #{deliveryStatus}, #{deliveryTime}, #{packagingFee}, #{tablewareNumber}, #{tablewareStatus})
    </insert>
    <update id="update" parameterType="com.mealmate.entity.Order">
        update orders
        <set>
            <if test="cancelReason != null and cancelReason!='' "> cancel_reason=#{cancelReason}, </if>
            <if test="rejectionReason != null and rejectionReason!='' "> rejection_reason=#{rejectionReason}, </if>
            <if test="cancelTime != null"> cancel_time=#{cancelTime}, </if>
            <if test="payStatus != null"> pay_status=#{payStatus}, </if>
            <if test="payMethod != null"> pay_method=#{payMethod}, </if>
            <if test="checkoutTime != null"> checkout_time=#{checkoutTime}, </if>
            <if test="status != null"> status = #{status}, </if>
            <if test="deliveryTime != null"> delivery_time = #{deliveryTime} </if>
            <if test="paymentIntentId != null"> payment_intent_id = #{paymentIntentId} </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateMulti">
        update orders
        <set>
            <if test="status != null"> status = #{status}, </if>
            <if test="cancelReason != null"> cancel_reason = #{cancelReason}, </if>
            <if test="cancelTime != null"> cancel_time = #{cancelTime}, </if>
        </set>
        where id in
        <foreach collection="orders" item="order" open="(" separator="," close=")">
            #{order.id}
        </foreach>
    </update>
    <select id="pageQuery" parameterType="com.mealmate.dto.OrderPageQueryDTO" resultType="com.mealmate.entity.Order">
        select * from orders
        <where>
            <if test="serialNumber != null and serialNumber!=''">serial_number like concat('%',#{serialNumber},'%')</if>
            <if test="phone != null and phone!=''"> and phone like concat('%',#{phone},'%')</if>
            <if test="userId != null"> and user_id = #{userId}</if>
            <if test="status != null"> and status = #{status}</if>
            <if test="beginTime != null"> and order_time &gt;= #{beginTime}</if>
            <if test="endTime != null"> and order_time &lt;= #{endTime}</if>
        </where>
        order by order_time desc
    </select>
    <select id="getTurnoverList">
        SELECT total_price FROM
        (WITH RECURSIVE date_series AS (
            SELECT #{startDate} AS date
            UNION ALL
            SELECT DATE_ADD(date, INTERVAL 1 DAY)
            FROM date_series
            WHERE date &lt; #{endDate}
        )
        SELECT
            ds.date AS order_date, COALESCE(SUM(s.price), 0) AS total_price
        FROM
            date_series ds
        LEFT JOIN
            (SELECT order_time, price FROM orders WHERE status=5) s ON ds.date = date(s.order_time)
        GROUP BY
            ds.date
        ORDER BY
            ds.date) tmp
    </select>
    <select id="getOrderList">
        SELECT total_order FROM
        (WITH RECURSIVE date_series AS (
            SELECT #{startDate} AS date
            UNION ALL
            SELECT DATE_ADD(date, INTERVAL 1 DAY)
            FROM date_series
            WHERE date &lt; #{endDate}
        )
        SELECT
            ds.date AS time, (SELECT COUNT(*) FROM orders
            <where>
                <if test="status!=null">status = #{status}</if>
                AND DATE(order_time) = ds.date
            </where>) AS total_order
        FROM
            date_series ds
        ORDER BY
            ds.date) tmp
    </select>

    <select id="getTop10Sales" resultType="com.mealmate.entity.ItemSales">
        SELECT od.name as name, SUM(od.quantity) as quantity
        FROM
            ((SELECT id FROM orders WHERE status=5 AND DATE(order_time) &gt;= #{startDate} AND DATE(order_time) &lt;= #{endDate}) o
            JOIN
            order_detail od ON o.id = od.order_id)
        GROUP BY od.name
        ORDER BY quantity DESC
        LIMIT 10
    </select>
</mapper>